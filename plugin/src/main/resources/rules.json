[
  {
    "From": "java.io.File",
    "To": "java.nio.file.Path",
    "Kind": "Reactive",
    "Rules": [
      {
        "Before": "new File($1$, $2$)",
        "After": "$1$.resolve($2$)"
      },
      {
        "Before": "new File($1$+\"/\"+$2$)",
        "After": "$1$.resolve($2$)"
      },
      {
        "Before": "new File($1$+\"\\\\\"+$2$)",
        "After": "$1$.resolve($2$)"
      },
      {
        "Before": "new File($2$, $3$)",
        "After": "Path.of($2$, $3$)"
      },
      {
        "Before": "new File($2$)",
        "After": "Paths.get($2$)",
        "RequiredImports": "java.nio.file.Paths"
      },
      {
        "Before": "$1$.exists()",
        "After": "Files.exists($1$)",
        "RequiredImports": "java.nio.file.Files"
      },
      {
        "Before": "!$1$.exists()",
        "After": "Files.notExists($1$)",
        "RequiredImports": "java.nio.file.Files"
      },
      {
        "Before": "$1$.getName()",
        "After": "$1$.getFileName()"
      },
      {
        "Before": "$1$.isFile()",
        "After": "Files.isRegularFile($1$)",
        "RequiredImports": "java.nio.file.Files"
      },
      {
        "Before": "$1$.mkdir()",
        "After": "Files.createDirectory($1$)",
        "ReturnType": {
          "Before": "boolean",
          "After": "java.nio.file.Path"
        },
        "RequiredImports": "java.nio.file.Files"
      },
      {
        "Before": "$1$.getAbsolutePath()",
        "After": "$1$.toAbsolutePath().toString()"
      },
      {
        "Before": "$1$.getCanonicalPath()",
        "After": "$1$.toRealPath().toString()"
      },
      {
        "Before": "$1$.getPath()",
        "After": "$1$.toString()"
      },
      {
        "Before": "$1$.getParentFile()",
        "After": "$1$.getParent().toFile()"
      },
      {
        "Before": "$1$.getCanonicalFile()",
        "After": "$1$.toRealPath()"
      },
      {
        "Before": "$1$.canWrite()",
        "After": "Files.isWritable($1$)",
        "RequiredImports": "java.nio.file.Files"
      },
      {
        "Before": "new FileInputStream($1$)",
        "After": "Files.newInputStream($1$)",
        "RequiredImports": "java.nio.file.Files"
      },
      {
        "Before": "new FileOutputStream($1$)",
        "After": "Files.newOutputStream($1$)",
        "RequiredImports": "java.nio.file.Files"
      },
      {
        "Before": "new FileOutputStream(new File($1$,$2$))",
        "After": "Files.newOutputStream($1$.resolve($2$))",
        "RequiredImports": "java.nio.file.Files"
      },
      {
        "Before": "$1$.delete()",
        "After": "Files.delete($1$)",
        "RequiredImports": "java.nio.file.Files"
      },
      {
        "Before": "$1$.length()",
        "After": "Files.size($1$)",
        "RequiredImports": "java.nio.file.Files"
      },
      {
        "Before": "$1$.isDirectory()",
        "After": "Files.isDirectory($1$)",
        "RequiredImports": "java.nio.file.Files"
      },
      {
        "Before": "$1$.canRead()",
        "After": "Files.isReadable($1$)",
        "RequiredImports": "java.nio.file.Files"
      },
      {
        "Before": "$1$",
        "After": "$1$.toFile()"
      },
      {
        "Before": "$1$.toPath()",
        "After": "$1$"
      }
    ],
    "ID": 1,
    "Rank": 73
  },
  {
    "From": "java.lang.String",
    "To": "java.util.regex.Pattern",
    "Kind": "Reactive",
    "Rules": [
      {
        "Before": "$1$.equals($2$)",
        "After": "$1$.matcher($2$).matches()"
      },
      {
        "Before": "$2$",
        "After": "Pattern.compile($2$)"
      },
      {
        "Before": "$1$",
        "After": "$1$.pattern()"
      }
    ],
    "ID": 2,
    "Rank": 16
  },
  {
    "From": "java.util.List<$1$>",
    "To": "java.util.Set<$1$>",
    "Kind": "Reactive",
    "Rules": [
      {
        "Before": "Lists.newArrayList()",
        "After": "Sets.newHashSet()",
        "RequiredImports": "com.google.common.collect.Sets"
      },
      {
        "Before": "Lists.newArrayList($2$)",
        "After": "Sets.newHashSet($2$)",
        "RequiredImports": "com.google.common.collect.Sets"
      },
      {
        "Before": "new ArrayList<>()",
        "After": "new HashSet<>()",
        "RequiredImports": "java.util.HashSet"
      },
      {
        "Before": "new ArrayList<$2$>()",
        "After": "new HashSet<$2$>()",
        "RequiredImports": "java.util.HashSet"
      },
      {
        "Before": "new ArrayList<>($2$)",
        "After": "new HashSet<>($2$)",
        "RequiredImports": "java.util.HashSet"
      },
      {
        "Before": "new ArrayList<$2$>($3$)",
        "After": "new HashSet<$2$>($3$)",
        "RequiredImports": "java.util.HashSet"
      },
      {
        "Before": "$1$.get(0)",
        "After": "$1$.iterator().next()"
      },
      {
        "Before": "Collections.unmodifiableList()",
        "After": "Collections.unmodifiableSet()"
      },
      {
        "Before": "Collections.emptyList()",
        "After": "Collections.emptySet()"
      },
      {
        "Before": "Collections.singletonList()",
        "After": "Collections.singleton()"
      },
      {
        "Before": "ImmutableList.of($1$)",
        "After": "ImmutableSet.of($1$)",
        "RequiredImports": "com.google.common.collect.ImmutableSet"
      },
      {
        "Before": "Collections.synchronizedList($2$)",
        "After": "Collections.synchronizedSet($2$)"
      },
      {
        "Before": "(List)$2$",
        "After": "(Set)$2$"
      },
      {
        "Before": "new LinkedList<$2$>()",
        "After": "new LinkedHashSet<$2$>()",
        "RequiredImports": "java.util.LinkedHashSet"
      },
      {
        "Before": "$2$.collect(Collectors.toList())",
        "After": "$2$.collect(Collectors.toSet())"
      },
      {
        "Before": "$2$.collect(toImmutableList())",
        "After": "$2$.collect(toImmutableSet())",
        "RequiredImports": "com.google.common.collect.ImmutableSet"
      },
      {
        "Before": "$2$",
        "After": "new HashSet<>($2$)"
      }
    ],
    "ID": 3,
    "Rank": 206
  },
  {
    "From": "java.util.List<$1$>",
    "To": "java.util.Deque<$1$>",
    "Kind": "Reactive",
    "Rules": [
      {
        "Before": "new ArrayList<$2$>($3$)",
        "After": "new ArrayDeque<$2$>($3$)",
        "RequiredImports": "java.util.ArrayDeque"
      },
      {
        "Before": "$1$.remove(0)",
        "After": "$1$.removeFirst()"
      },
      {
        "Before": "$1$.add($2$)",
        "After": "$1$.addLast($2$)"
      }
    ],
    "ID": 4,
    "Rank": 11
  },
  {
    "From": "java.lang.String",
    "To": "java.nio.charset.Charset",
    "Kind": "Reactive",
    "Rules": [
      {
        "Before": "Charset.forName($1$)",
        "After": "$1$"
      }
    ],
    "ID": 5,
    "Rank": 13
  },
  {
    "From": "java.lang.String",
    "To": "java.net.URL",
    "Kind": "Reactive",
    "Rules": [
      {
        "Before": "$1$",
        "After": "$1$.toString()"
      },
      {
        "Before": "new URL($1$)",
        "After": "$1$"
      },
      {
        "Before": "$2$",
        "After": "new URL($2$)"
      }
    ],
    "ID": 6,
    "Rank": 12
  },
  {
    "From": "java.lang.String",
    "To": "java.net.URI",
    "Kind": "Reactive",
    "Rules": [
      {
        "Before": "$1$",
        "After": "$1$.toString()"
      },
      {
        "Before": "$1$",
        "After": "$1$.toASCIIString()"
      },
      {
        "Before": "$1$",
        "After": "$1$.getSchemeSpecificPart()"
      },
      {
        "Before": "$2$",
        "After": "URI.create($2$)"
      },
      {
        "Before": "$1$",
        "After": "$1$.getScheme()"
      },
      {
        "Before": "new URL($1$)",
        "After": "$1$.toURL()"
      },
      {
        "Before": "$2$.toPath()",
        "After": "$2$.toURI()"
      }
    ],
    "ID": 7,
    "Rank": 29
  },
  {
    "From": "java.util.concurrent.Callable<$1$>",
    "To": "java.util.function.Supplier<$1$>",
    "Kind": "Reactive",
    "Rules": [
      {
        "Before": "$1$.call()",
        "After": "$1$.get()"
      },
      {
        "Before": "$1$::call",
        "After": "$1$::get"
      }
    ],
    "ID": 8
  },
  {
    "From": "java.util.Map<java.lang.String, java.lang.String>",
    "To": "java.util.Properties",
    "Kind": "Reactive",
    "Rules": [
      {
        "Before": "$1$.get()",
        "After": "$1$.getProperty()"
      }
    ],
    "ID": 9
  },
  {
    "From": "java.lang.String",
    "To": "java.util.UUID",
    "Kind": "Reactive",
    "Rules": [
      {
        "Before": "UUID.fromString($1$)",
        "After": "$1$"
      },
      {
        "Before": "$2$",
        "After": "UUID.fromString($2$)"
      }
    ],
    "ID": 10,
    "Rank": 14
  },
  {
    "From": "$1$",
    "To": "java.util.Optional<$1$>",
    "Kind": "Reactive",
    "Rules": [
      {
        "Before": "$1$ != null",
        "After": "$1$.isPresent()"
      },
      {
        "Before": "$1$",
        "After": "$1$.get()"
      },
      {
        "Before": "$2$",
        "After": "Optional.ofNullable($2$)"
      },
      {
        "Before": "$1$ == null",
        "After": "$1$.isEmpty()"
      },
      {
        "Before": "Optional.of($1$)",
        "After": "$1$"
      },
      {
        "Before": "Optional.ofNullable($1$)",
        "After": "$1$"
      },
      {
        "Before": "null",
        "After": "Optional.empty()"
      },
      {
        "Before": "$2$.$3$($1$)",
        "After": "$1$.map($2$::$3$)",
        "ReturnType": {
          "Before": "$1$",
          "After": "java.util.Optional<$1$>"
        }
      }
    ],
    "ID": 11,
    "Rank": 355
  },
  {
    "From": "java.util.Optional<$1$>",
    "To": "$1$",
    "Kind": "Reactive",
    "Rules": [
      {
        "Before": "$1$.isPresent()",
        "After": "$1$ != null"
      },
      {
        "Before": "$1$.get()",
        "After": "$1$"
      },
      {
        "Before": "$1$.orElse($2$)",
        "After": "$1$"
      },
      {
        "Before": "Optional.of($2$)",
        "After": "$2$"
      },
      {
        "Before": "Optional.ofNullable($2$)",
        "After": "$2$"
      },
      {
        "Before": "$1$.isEmpty()",
        "After": "$1$ == null"
      },
      {
        "Before": "$1$",
        "After": "Optional.of($1$)"
      },
      {
        "Before": "$1$",
        "After": "Optional.ofNullable($1$)"
      },
      {
        "Before": "Optional.empty()",
        "After": "null"
      },
      {
        "Before": "$1$.map($2$::$3$)",
        "After": "$2$.$3$($1$)",
        "ReturnType": {
          "Before": "java.util.Optional<$1$>",
          "After": "$1$"
        }
      }
    ],
    "ID": 12
  },
  {
    "From": "$1$",
    "To": "java.util.List<$1$>",
    "Kind": "Reactive",
    "Rules": [
      {
        "Before": "$2$",
        "After": "Collections.singletonList($2$)",
        "RequiredImports": "java.util.Collections"
      },
      {
        "Before": "$1$",
        "After": "$1$.get(0)"
      },
      {
        "Before": "$1$ = $2$",
        "After": "$1$.add($2$)"
      },
      {
        "Before": "$1$ == null",
        "After": "$1$.isEmpty()"
      },
      {
        "Before": "$1$ != null",
        "After": "!$1$.isEmpty()"
      },
      {
        "Before": "Arrays.stream($1$)",
        "After": "$1$.stream()"
      }
    ],
    "ID": 13,
    "Rank": 261
  },
  {
    "From": "java.lang.String",
    "To": "java.nio.file.Path",
    "Kind": "Reactive",
    "Rules": [
      {
        "Before": "$2$",
        "After": "Paths.get($2$)",
        "RequiredImports": "java.nio.file.Paths"
      },
      {
        "Before": "Paths.get($1$)",
        "After": "$1$"
      },
      {
        "Before": "$1$",
        "After": "$1$.toString()"
      },
      {
        "Before": "new File($1$)",
        "After": "$1$.toFile()"
      }
    ],
    "ID": 14,
    "Rank": 43
  },
  {
    "From": "int",
    "To": "long",
    "Kind": "Reactive",
    "Rules": [
      {
        "Before": "$1$",
        "After": "Math.toIntExact($1$)",
        "RequiredImports": "java.lang.Math"
      },
      {
        "Before": "Integer.parseInt($2$)",
        "After": "Long.parseLong($2$)"
      },
      {
        "Before": "$2$",
        "After": "(long) ($2$)"
      },
      {
        "Before": "(int)$2$",
        "After": "(long)$2$"
      },
      {
        "Before": "(long)$2$",
        "After": "$2$"
      },
      {
        "Before": "new AtomicInteger($1$)",
        "After": "new AtomicLong($1$)"
      },
      {
        "Before": "$2$.intValue()",
        "After": "$2$.longValue()"
      },
      {
        "Before": "$2$.readInt()",
        "After": "$2$.readLong()"
      }
    ],
    "ID": 15,
    "Rank": 288
  },
  {
    "From": "long",
    "To": "java.math.BigInteger",
    "Kind": "Reactive",
    "Rules": [
      {
        "Before": "BigInteger.valueOf($1$)",
        "After": "$1$"
      },
      {
        "Before": "$2$",
        "After": "BigInteger.valueOf($2$)"
      }
    ],
    "ID": 16,
    "Rank": 2
  },
  {
    "From": "java.util.Date",
    "To": "java.time.Instant",
    "Kind": "Reactive",
    "Rules": [
      {
        "Before": "$1$.getTime()",
        "After": "$1$.getEpochSecond()"
      }
    ],
    "ID": 17,
    "Rank": 7
  },
  {
    "From": "java.util.Date",
    "To": "java.time.LocalDate",
    "Kind": "Reactive",
    "Rules": [
      {
        "Before": "$1$.toInstant()",
        "After": "$1$.atStartOfDay()",
        "ReturnType": {
          "Before": "java.time.Instant",
          "After": "java.time.LocalDateTime"
        }
      },
      {
        "Before": "$1$.before($2$)",
        "After": "$1$.isBefore($2$)"
      },
      {
        "Before": "$1$.after($2$)",
        "After": "$1$.isAfter($2$)"
      }
    ],
    "ID": 18,
    "Rank": 6
  },
  {
    "From": "long",
    "To": "java.time.Duration",
    "Kind": "Reactive",
    "Rules": [
      {
        "Before": "$1$",
        "After": "$1$.toMillis()"
      },
      {
        "Before": "$2$",
        "After": "Duration.ofMillis($2$)"
      }
    ],
    "ID": 19,
    "Rank": 19
  },
  {
    "From": "java.util.function.Function<java.lang.Integer,java.lang.Integer>",
    "To": "java.util.function.IntUnaryOperator",
    "Inspect": true,
    "Kind": "Proactive",
    "Rules": [
      {
        "Before": "$1$.apply($2$)",
        "After": "$1$.applyAsInt($2$)"
      }
    ],
    "ID": 20
  },
  {
    "From": "java.util.function.Function<java.lang.Double,java.lang.Integer>",
    "To": "java.util.function.DoubleToIntFunction",
    "Inspect": true,
    "Kind": "Proactive",
    "Rules": [
      {
        "Before": "$1$.apply($2$)",
        "After": "$1$.applyAsInt($2$)"
      }
    ],
    "ID": 21
  },
  {
    "From": "java.util.function.Function<java.lang.Long,java.lang.Integer>",
    "To": "java.util.function.LongToIntFunction",
    "Inspect": true,
    "Kind": "Proactive",
    "Rules": [
      {
        "Before": "$1$.apply($2$)",
        "After": "$1$.applyAsInt($2$)"
      }
    ],
    "ID": 22
  },
  {
    "From": "java.util.function.Function<$1$,java.lang.Integer>",
    "To": "java.util.function.ToIntFunction",
    "Inspect": true,
    "Kind": "Proactive",
    "Rules": [
      {
        "Before": "$1$.apply($2$)",
        "After": "$1$.applyAsInt($2$)"
      }
    ],
    "ID": 23
  },
  {
    "From": "java.util.function.BiFunction<java.lang.Integer,java.lang.Integer,java.lang.Integer>",
    "To": "java.util.function.IntBinaryOperator",
    "Inspect": true,
    "Kind": "Proactive",
    "Rules": [
      {
        "Before": "$1$.apply($2$, $3$)",
        "After": "$1$.applyAsInt($2$, $3$)"
      }
    ],
    "ID": 24
  },
  {
    "From": "java.util.function.BiFunction<$1$,$2$,java.lang.Integer>",
    "To": "java.util.function.ToIntBiFunction",
    "Inspect": true,
    "Kind": "Proactive",
    "Rules": [
      {
        "Before": "$1$.apply($2$, $3$)",
        "After": "$1$.applyAsInt($2$, $3$)"
      }
    ],
    "ID": 25
  },
  {
    "From": "java.util.function.BiFunction<$1$,$2$,java.lang.Long>",
    "To": "java.util.function.ToLongBiFunction",
    "Inspect": true,
    "Kind": "Proactive",
    "Rules": [
      {
        "Before": "$1$.apply($2$, $3$)",
        "After": "$1$.applyAsLong($2$, $3$)"
      }
    ],
    "ID": 26
  },
  {
    "From": "java.util.function.BiFunction<$1$,$2$,java.lang.Double>",
    "To": "java.util.function.ToDoubleBiFunction",
    "Inspect": true,
    "Kind": "Proactive",
    "Rules": [
      {
        "Before": "$1$.apply($2$, $3$)",
        "After": "$1$.applyAsDouble($2$, $3$)"
      }
    ],
    "ID": 27
  },
  {
    "From": "java.util.function.Function<java.lang.Long,java.lang.Long>",
    "To": "java.util.function.LongUnaryOperator",
    "Inspect": true,
    "Kind": "Proactive",
    "Rules": [
      {
        "Before": "$1$.apply($2$)",
        "After": "$1$.applyAsLong($2$)"
      }
    ],
    "ID": 28
  },
  {
    "From": "java.util.function.Function<java.lang.Integer,java.lang.Long>",
    "To": "java.util.function.IntToLongFunction",
    "Inspect": true,
    "Kind": "Proactive",
    "Rules": [
      {
        "Before": "$1$.apply($2$)",
        "After": "$1$.applyAsLong($2$)"
      }
    ],
    "ID": 29
  },
  {
    "From": "java.util.function.Function<java.lang.Double,java.lang.Long>",
    "To": "java.util.function.DoubleToLongFunction",
    "Inspect": true,
    "Kind": "Proactive",
    "Rules": [
      {
        "Before": "$1$.apply($2$)",
        "After": "$1$.applyAsLong($2$)"
      }
    ],
    "ID": 30
  },
  {
    "From": "java.util.function.Function<$1$,java.lang.Long>",
    "To": "java.util.function.ToLongFunction",
    "Inspect": true,
    "Kind": "Proactive",
    "Rules": [
      {
        "Before": "$1$.apply($2$)",
        "After": "$1$.applyAsLong($2$)"
      }
    ],
    "ID": 31
  },
  {
    "From": "java.util.function.BiFunction<java.lang.Long,java.lang.Long,java.lang.Long>",
    "To": "java.util.function.LongBinaryOperator",
    "Inspect": true,
    "Kind": "Proactive",
    "Rules": [
      {
        "Before": "$1$.apply($2$, $3$)",
        "After": "$1$.applyAsLong($2$, $3$)"
      }
    ],
    "ID": 32
  },
  {
    "From": "java.util.function.BiFunction<java.lang.Double,java.lang.Double,java.lang.Double>",
    "To": "java.util.function.DoubleBinaryOperator",
    "Inspect": true,
    "Kind": "Proactive",
    "Rules": [
      {
        "Before": "$1$.apply($2$, $3$)",
        "After": "$1$.applyAsDouble($2$, $3$)"
      }
    ],
    "ID": 33
  },
  {
    "From": "java.util.function.Function<java.lang.Double,java.lang.Double>",
    "To": "java.util.function.DoubleUnaryOperator",
    "Inspect": true,
    "Kind": "Proactive",
    "Rules": [
      {
        "Before": "$1$.apply($2$)",
        "After": "$1$.applyAsDouble($2$)"
      }
    ],
    "ID": 34
  },
  {
    "From": "java.util.function.Function<java.lang.Integer,java.lang.Double>",
    "To": "java.util.function.IntToDoubleFunction",
    "Inspect": true,
    "Kind": "Proactive",
    "Rules": [
      {
        "Before": "$1$.apply($2$)",
        "After": "$1$.applyAsDouble($2$)"
      }
    ],
    "ID": 35
  },
  {
    "From": "java.util.function.Function<java.lang.Long,java.lang.Double>",
    "To": "java.util.function.LongToDoubleFunction",
    "Inspect": true,
    "Kind": "Proactive",
    "Rules": [
      {
        "Before": "$1$.apply($2$)",
        "After": "$1$.applyAsDouble($2$)"
      }
    ],
    "ID": 36
  },
  {
    "From": "java.util.function.Function<$1$,java.lang.Double>",
    "To": "java.util.function.ToDoubleFunction",
    "Inspect": true,
    "Kind": "Proactive",
    "Rules": [
      {
        "Before": "$1$.apply($2$)",
        "After": "$1$.applyAsDouble($2$)"
      }
    ],
    "ID": 37
  },
  {
    "From": "java.util.function.Function<java.lang.Long,java.lang.Boolean>",
    "To": "java.util.function.LongPredicate",
    "Inspect": true,
    "Kind": "Proactive",
    "Rules": [
      {
        "Before": "$1$.apply($2$)",
        "After": "$1$.test($2$)"
      }
    ],
    "ID": 38
  },
  {
    "From": "java.util.function.Function<java.lang.Integer,java.lang.Boolean>",
    "To": "java.util.function.IntPredicate",
    "Inspect": true,
    "Kind": "Proactive",
    "Rules": [
      {
        "Before": "$1$.apply($2$)",
        "After": "$1$.test($2$)"
      }
    ],
    "ID": 39
  },
  {
    "From": "java.util.function.Function<java.lang.Double,java.lang.Boolean>",
    "To": "java.util.function.DoublePredicate",
    "Inspect": true,
    "Kind": "Proactive",
    "Rules": [
      {
        "Before": "$1$.apply($2$)",
        "After": "$1$.test($2$)"
      }
    ],
    "ID": 40
  },
  {
    "From": "java.util.function.Function<$1$,java.lang.Boolean>",
    "To": "java.util.function.Predicate<$1$>",
    "Inspect": true,
    "Kind": "Proactive",
    "Rules": [
      {
        "Before": "$1$.apply($2$)",
        "After": "$1$.test($2$)"
      }
    ],
    "ID": 41,
    "Rank": 5
  },
  {
    "From": "java.util.function.Supplier<java.lang.Integer>",
    "To": "java.util.function.IntSupplier",
    "Kind": "Proactive",
    "Inspect": true,
    "Rules": [
      {
        "Before": "$1$.get()",
        "After": "$1$.getAsInt()"
      },
      {
        "Before": "$1$::get",
        "After": "$1$::getAsInt"
      }
    ],
    "ID": 42,
    "Rank": 2
  },
  {
    "From": "java.util.function.Supplier<java.lang.Long>",
    "To": "java.util.function.LongSupplier",
    "Kind": "Proactive",
    "Inspect": true,
    "Rules": [
      {
        "Before": "$1$.get()",
        "After": "$1$.getAsLong()"
      },
      {
        "Before": "$1$::get",
        "After": "$1$::getAsLong"
      }
    ],
    "ID": 43
  },
  {
    "From": "java.util.function.Supplier<java.lang.Double>",
    "To": "java.util.function.DoubleSupplier",
    "Kind": "Proactive",
    "Inspect": true,
    "Rules": [
      {
        "Before": "$1$.get()",
        "After": "$1$.getAsDouble()"
      },
      {
        "Before": "$1$::get",
        "After": "$1$::getAsDouble"
      }
    ],
    "ID": 44
  },
  {
    "From": "java.util.function.Supplier<java.lang.Boolean>",
    "To": "java.util.function.BooleanSupplier",
    "Kind": "Proactive",
    "Inspect": true,
    "Rules": [
      {
        "Before": "$1$.get()",
        "After": "$1$.getAsBoolean()"
      },
      {
        "Before": "$1$::get",
        "After": "$1$::getAsBoolean"
      }
    ],
    "ID": 45
  },
  {
    "From": "java.util.Optional<java.lang.Integer>",
    "To": "java.util.OptionalInt",
    "Kind": "Proactive",
    "Inspect": true,
    "Rules": [
      {
        "Before": "Optional.of($2$)",
        "After": "OptionalInt.of($2$)"
      },
      {
        "Before": "Optional.ofNullable($2$)",
        "After": "OptionalInt.ofNullable($2$)"
      },
      {
        "Before": "Optional.empty()",
        "After": "OptionalInt.empty()"
      },
      {
        "Before": "$1$.get()",
        "After": "$1$.getAsInt()"
      },
      {
        "Before": "$1$::get",
        "After": "$1$::getAsInt"
      },
      {
        "Before": "$1$.map($2$->$3$)",
        "After": "$1$.stream().boxed().map($2$->$3$).findFirst()"
      }
    ],
    "ID": 46,
    "Rank": 3
  },
  {
    "From": "java.util.Optional<java.lang.Long>",
    "To": "java.util.OptionalLong",
    "Kind": "Proactive",
    "Inspect": true,
    "Rules": [
      {
        "Before": "Optional.of($2$)",
        "After": "OptionalLong.of($2$)"
      },
      {
        "Before": "Optional.ofNullable($2$)",
        "After": "OptionalLong.ofNullable($2$)"
      },
      {
        "Before": "Optional.empty()",
        "After": "OptionalLong.empty()"
      },
      {
        "Before": "$1$.get()",
        "After": "$1$.getAsLong()"
      },
      {
        "Before": "$1$::get",
        "After": "$1$::getAsLong"
      },
      {
        "Before": "$1$.map($2$->$3$)",
        "After": "$1$.stream().boxed().map($2$->$3$).findFirst()"
      }
    ],
    "ID": 47
  },
  {
    "From": "java.util.Optional<java.lang.Double>",
    "To": "java.util.OptionalDouble",
    "Kind": "Proactive",
    "Inspect": true,
    "Rules": [
      {
        "Before": "Optional.of($2$)",
        "After": "OptionalDouble.of($2$)"
      },
      {
        "Before": "Optional.ofNullable($2$)",
        "After": "OptionalDouble.ofNullable($2$)"
      },
      {
        "Before": "Optional.empty()",
        "After": "OptionalDouble.empty()"
      },
      {
        "Before": "$1$.get()",
        "After": "$1$.getAsDouble()"
      },
      {
        "Before": "$1$::get",
        "After": "$1$::getAsDouble"
      },
      {
        "Before": "$1$.map($2$->$3$)",
        "After": "$1$.stream().boxed().map($2$->$3$).findFirst()"
      }
    ],
    "ID": 48
  },
  {
    "From": "com.google.common.base.Optional<$1$>",
    "To": "java.util.Optional<$1$>",
    "Kind": "Proactive",
    "Rules": [
      {
        "Before": "$1$.orNull()",
        "After": "$1$.orElse(null)"
      },
      {
        "Before": "$1$.transform($2$->$3$)",
        "After": "$1$.map($2$->$3$)"
      },
      {
        "Before": "Optional.absent()",
        "After": "Optional.empty()"
      },
      {
        "Before": "$1$.fromNullable($2$)",
        "After": "$1$.ofNullable($2$)"
      },
      {
        "Before": "$1$.or($2$)",
        "After": "$1$.orElse($2$)"
      },
      {
        "Before": "$1$.or($2$->$3$)",
        "After": "$1$.orElseGet($2$->$3$)"
      },
      {
        "Before": "!$1$.isPresent()",
        "After": "$1$.isAbsent()"
      }
    ],
    "ID": 49
  },
  {
    "From": "com.google.common.base.Function<$1$,$2$>",
    "To": "java.util.function.Function<$1$,$2$>",
    "Kind": "Proactive",
    "Rules": [],
    "ID": 50
  },
  {
    "From": "com.google.common.base.Function<java.lang.Long,$2$>",
    "To": "java.util.function.LongFunction<$2$>",
    "Kind": "Proactive",
    "Rules": [],
    "ID": 51
  },
  {
    "From": "com.google.common.base.Predicate<$1$>",
    "To": "java.util.function.Predicate<$1$>",
    "Kind": "Proactive",
    "Rules": [],
    "ID": 52
  },
  {
    "From": "com.google.common.base.Supplier<$1$>",
    "To": "java.util.function.Supplier<$1$>",
    "Kind": "Proactive",
    "Rules": [],
    "ID": 53
  },
  {
    "From": "java.util.function.Consumer<java.lang.Integer>",
    "To": "java.util.function.IntConsumer",
    "Kind": "Proactive",
    "Inspect": true,
    "Rules": [],
    "ID": 54
  },
  {
    "From": "java.util.function.Consumer<java.lang.Long>",
    "To": "java.util.function.LongConsumer",
    "Kind": "Proactive",
    "Inspect": true,
    "Rules": [],
    "ID": 55
  },
  {
    "From": "java.util.function.Consumer<java.lang.Double>",
    "To": "java.util.function.DoubleConsumer",
    "Kind": "Proactive",
    "Inspect": true,
    "Rules": [],
    "ID": 56
  },
  {
    "From": "com.google.common.base.Optional<java.lang.Integer>",
    "To": "java.util.OptionalInt",
    "Kind": "Proactive",
    "Inspect": true,
    "Rules": [
      {
        "Before": "Optional.of($2$)",
        "After": "OptionalInt.of($2$)"
      },
      {
        "Before": "Optional.fromNullable($2$)",
        "After": "OptionalInt.ofNullable($2$)"
      },
      {
        "Before": "Optional.absent()",
        "After": "OptionalInt.empty()"
      },
      {
        "Before": "$1$.get()",
        "After": "$1$.getAsInt()"
      },
      {
        "Before": "$1$::get",
        "After": "$1$::getAsInt"
      },
      {
        "Before": "$1$.transform($2$->$3$)",
        "After": "$1$.stream().boxed().map($2$->$3$).findFirst()"
      },
      {
        "Before": "!$1$.isPresent()",
        "After": "$1$.isAbsent()"
      },
      {
        "Before": "$1$.or($2$)",
        "After": "$1$.orElse($2$)"
      },
      {
        "Before": "$1$.or($2$->$3$)",
        "After": "$1$.orElseGet($2$->$3$)"
      }
    ],
    "ID": 57
  },
  {
    "From": "com.google.common.base.Optional<java.lang.Long>",
    "To": "java.util.OptionalLong",
    "Kind": "Proactive",
    "Inspect": true,
    "Rules": [
      {
        "Before": "Optional.of($2$)",
        "After": "OptionalLong.of($2$)"
      },
      {
        "Before": "Optional.fromNullable($2$)",
        "After": "OptionalLong.ofNullable($2$)"
      },
      {
        "Before": "Optional.absent()",
        "After": "OptionalLong.empty()"
      },
      {
        "Before": "$1$.get()",
        "After": "$1$.getAsLong()"
      },
      {
        "Before": "$1$::get",
        "After": "$1$::getAsLong"
      },
      {
        "Before": "$1$.transform($2$->$3$)",
        "After": "$1$.stream().boxed().map($2$->$3$).findFirst()"
      },
      {
        "Before": "!$1$.isPresent()",
        "After": "$1$.isAbsent()"
      },
      {
        "Before": "$1$.or($2$)",
        "After": "$1$.orElse($2$)"
      },
      {
        "Before": "$1$.or($2$->$3$)",
        "After": "$1$.orElseGet($2$->$3$)"
      }
    ],
    "ID": 58
  },
  {
    "From": "com.google.common.base.Optional<java.lang.Double>",
    "To": "java.util.OptionalDouble",
    "Kind": "Proactive",
    "Inspect": true,
    "Rules": [
      {
        "Before": "Optional.of($2$)",
        "After": "OptionalDouble.of($2$)"
      },
      {
        "Before": "Optional.fromNullable($2$)",
        "After": "OptionalDouble.ofNullable($2$)"
      },
      {
        "Before": "Optional.absent()",
        "After": "OptionalDouble.empty()"
      },
      {
        "Before": "$1$.get()",
        "After": "$1$.getAsDouble()"
      },
      {
        "Before": "$1$::get",
        "After": "$1$::getAsDouble"
      },
      {
        "Before": "$1$.transform($2$->$3$)",
        "After": "$1$.stream().boxed().map($2$->$3$).findFirst()"
      },
      {
        "Before": "!$1$.isPresent()",
        "After": "$1$.isAbsent()"
      },
      {
        "Before": "$1$.or($2$)",
        "After": "$1$.orElse($2$)"
      },
      {
        "Before": "$1$.or($2$->$3$)",
        "After": "$1$.orElseGet($2$->$3$)"
      }
    ],
    "ID": 59
  }
]