[
  {
    "From": "java.io.File",
    "To": "java.nio.file.Path",
    "Rules": [
      {
        "Before": "new File($1$, $2$)",
        "After": "Paths.get($1$, $2$)"
      },
      {
        "Before": "new File($1$)",
        "After": "Paths.get($1$)"
      },
      {
        "Before": "$1$.exists()",
        "After": "Files.exists($1$)"
      },
      {
        "Before": "$1$.getName()",
        "After": "$1$.getFileName()"
      },
      {
        "Before": "$1$.isFile()",
        "After": "Files.isRegularFile($1$)"
      },
      {
        "Before": "$1$.mkdir()",
        "After": "Files.createDirectory($1$)"
      },
      {
        "Before": "$1$.getAbsolutePath()",
        "After": "$1$.toAbsolutePath().toString()"
      },
      {
        "Before": "$1$.canWrite()",
        "After": "Files.isWritable($1$)"
      },
      {
        "Before": "$1$.delete()",
        "After": "Files.delete($1$)"
      },
      {
        "Before": "$1$.canRead()",
        "After": "Files.isReadable($1$)"
      },
      {
        "Before": "$1$",
        "After": "$1$.toFile()"
      },
      {
        "Before": "$1$.toPath()",
        "After": "$1$"
      }
    ]
  },
  {
    "From": "java.lang.String",
    "To": "java.util.regex.Pattern",
    "Rules": [
      {
        "Before": "$1$.equals($2$)",
        "After": "$2$.matcher($1$).matches()"
      },
      {
        "Before": "$1$",
        "After": "Patterns.compile($1$)"
      },
      {
        "Before": "$1$",
        "After": "$1$.pattern()"
      }
    ]
  },
  {
    "From": "java.util.List",
    "To": "java.util.Set",
    "Rules": [
      {
        "Before": "Lists.newArrayList()",
        "After": "Sets.newHashSet()"
      },
      {
        "Before": "$1$.get(0)",
        "After": "$1$.iterator().next()"
      },
      {
        "Before": "Collectors.toList()",
        "After": "Collectors.toSet()"
      },
      {
        "Before": "Collections.unmodifiableList()",
        "After": "Collections.unmodifiableSet()"
      },
      {
        "Before": "Collections.emptyList()",
        "After": "Collections.emptySet()"
      },
      {
        "Before": "Collections.singletonList()",
        "After": "Collections.singleton()"
      },
      {
        "Before": "ImmutableList.of($1$)",
        "After": "ImmutableSet.of($1$)"
      }
    ]
  },
  {
    "From": "java.util.concurrent.Callable",
    "To": "java.util.function.Supplier",
    "Rules": [
      {
        "Before": "$1$.call()",
        "After": "$1$.get()"
      }
    ]
  },
  {
    "From": "java.util.Map<java.lang.String, java.lang.String>",
    "To": "java.util.Properties",
    "Rules": [
      {
        "Before": "$1$.get()",
        "After": "$1$.getProperty()"
      }
    ]
  },
  {
    "From": "java.lang.String",
    "To": "java.util.UUID",
    "Rules": [
      {
        "Before": "UUID.fromString($1$)",
        "After": "$1$"
      }
    ]
  },
  {
    "From": "java.lang.String",
    "To": "java.util.Optional<java.lang.String>",
    "Rules": [
      {
        "Before": "$1$.$2$()",
        "After": "$1$.get().$2$()"
      },
      {
        "Before": "assertThat($1$).isEqualTo($2$)",
        "After": "assertThat($1$).contains($2$)"
      },
      {
        "Before": "$1$.orElse($2$)",
        "After": "$1$"
      },
      {
        "Before": "$1$",
        "After": "Optional.of($1$)"
      }
    ]
  },
  {
    "From": "java.lang.String",
    "To": "java.nio.file.Path",
    "Rules": [
      {
        "Before": "$1$",
        "After": "Paths.get($1$)"
      },
      {
        "Before": "$1$.toUri().getPath()",
        "After": "Paths.get($1$.toUri())"
      },
      {
        "Before": "$1$.getName()",
        "After": "Paths.get($1$.toUri())"
      }
    ]
  }
]